---
---

<div class="bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-900 dark:to-slate-800 text-slate-800 dark:text-slate-100 mb-20 p-4 lg:p-16 shadow-xl shadow-slate-200 dark:shadow-slate-900 min-h-screen flex items-center justify-center">
  <header class="p-8 flex flex-col items-center w-full space-y-8">
    <h1 class="text-4xl lg:text-5xl dark:text-slate-200 text-slate-600 leading-tight text-center">
      Citas del día
    </h1>
    <div id="cards-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      <!-- Las tarjetas serán añadidas aquí dinámicamente -->
    </div>
  </header>
</div>

<script>
  const container = document.getElementById("cards-container");
	 const BASE_URL = 'http://localhost:5000/api'

  function formatTime(dateString) {
    const date = new Date(dateString);
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  }

  function getEstadoColor(estado) {
    const colores = {
      'activa': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
      'en_proceso': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
      'completada': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
    };
    return colores[estado] || colores['activa'];
  }

  function getEstadoTexto(estado) {
    const textos = {
      'activa': 'Activa',
      'en_proceso': 'En Proceso',
      'completada': 'Completada'
    };
    return textos[estado] || 'Activa';
  }

	function getWhatsAppLink(paciente, medico, hora) {
    console.log('Datos del paciente:', paciente);
    console.log('Datos del médico:', medico);
    
    // Asegurarse de que el número de teléfono tenga el formato correcto
    const telefono = paciente?.telefono?.replace(/\D/g, ''); // Eliminar caracteres no numéricos
    const codigoPais = paciente?.areaCode || '+54'; // Usar código de área o default a +54
    const telefonoCompleto = `${codigoPais}${telefono}`.replace('+', '');
    
    const mensaje = encodeURIComponent(
        `Hola ${paciente.nombre}, Te habla ${medico.nombre} del consultorio odontológico, queríamos avisarte que hoy a las ${hora} tienes una cita en nuestro consultorio. Muchas Gracias.`
    );
    
    // Retornar la URL de WhatsApp
    return `https://wa.me/${telefonoCompleto}?text=${mensaje}`;
}
    
    

	window.handleAtenderClick = async function(citaId) {
    try {
        // Primero actualizamos el estado de la cita a 'en_proceso'
        const response = await fetch(`${BASE_URL}/citas/${citaId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                estado: 'en_proceso',
                // Incluimos todos los campos requeridos según tu schema
                fecha: new Date(), // Mantenemos la fecha actual
                motivo: document.getElementById(`motivo-${citaId}`)?.textContent || '',
                monto: document.getElementById(`monto-${citaId}`)?.textContent?.replace('$', '') || 0
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Error al actualizar el estado de la cita');
        }

        // Si la actualización fue exitosa, redirigimos a la página de consulta
        window.location.href = `/consulta?id=${citaId}`;
        
    } catch (error) {
        console.error('Error:', error);
        alert('Ocurrió un error al procesar la cita: ' + error.message);
    }
}

async function loadData() {
  try {
    const response = await fetch(`${BASE_URL}/citas/hoy`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const data = await response.json();
    const consultasHoy = data.data;
    console.log("Consultas de hoy: ", consultasHoy);

    container.innerHTML = '';

    for (const consulta of consultasHoy) {
      const card = document.createElement("div");
      card.className = "p-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700 dark:bg-gray-800 space-y-4";

      const mostrarBotonAtender = consulta.estado !== 'completada';
      const mostrarBotonRecordatorio = consulta.estado !== 'completada';

      const botonAtenderHtml = mostrarBotonAtender ? `
        <button 
          onclick="handleAtenderClick('${consulta._id}')"
          class="w-full px-4 py-2 text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors">
          ${consulta.estado === 'en_proceso' ? 'Continuar' : 'Atender'}
        </button>
      ` : '';

      const botonRecordatorioHtml = mostrarBotonRecordatorio ? `
        <button 
          onclick="window.open('${getWhatsAppLink(
            consulta.pacienteId, 
            consulta.medicoId, 
            formatTime(consulta.fecha)
          )}', '_blank')"
          class="px-4 py-2 text-white bg-green-500 hover:bg-green-600 rounded-lg transition-colors"
        >
          Enviar Recordatorio
        </button>
      ` : '';

      // Crear el contenedor principal de la tarjeta
      card.innerHTML = `
        <div class="space-y-4">
          <div class="flex justify-between items-center gap-2">
            <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-200 truncate">
              ${consulta.pacienteId.nombre}
            </h3>
            <span class="text-sm text-gray-500 dark:text-gray-400 whitespace-nowrap">
              ${formatTime(consulta.fecha)}
            </span>
          </div>
          <div class="text-gray-600 dark:text-gray-300">
            <p><strong>Médico:</strong> ${consulta.medicoId.nombre}</p>
            <p><strong>Motivo:</strong> ${consulta.motivo}</p>
          </div>
        </div>
      `;

      // Crear y configurar el contenedor de tratamientos
      const tratamientosContainer = document.createElement("div");
      tratamientosContainer.style.display = "none";
      tratamientosContainer.className = "mt-2 space-y-1 text-gray-600 dark:text-gray-300";
      
      // Configurar el botón de mostrar/ocultar tratamientos
      const toggleTratamientosButton = document.createElement("button");
      toggleTratamientosButton.textContent = "Mostrar tratamientos";
      toggleTratamientosButton.className = "text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200 mt-2";
      toggleTratamientosButton.addEventListener("click", () => {
        if (tratamientosContainer.style.display === "none") {
          tratamientosContainer.style.display = "block";
          toggleTratamientosButton.textContent = "Ocultar tratamientos";
        } else {
          tratamientosContainer.style.display = "none";
          toggleTratamientosButton.textContent = "Mostrar tratamientos";
        }
      });

      // Cargar los tratamientos
      if (Array.isArray(consulta.tratamientos) && consulta.tratamientos.length > 0) {
        tratamientosContainer.innerHTML = '<p>Cargando tratamientos...</p>';
        
        const tratamientosPromises = consulta.tratamientos.map(async (tratamiento) => {
          try {
            // Si ya tenemos el nombre del tratamiento
            if (tratamiento.nombre || tratamiento.nombreTratamiento) {
              return `<p><strong>Tratamiento:</strong> ${tratamiento.nombre || tratamiento.nombreTratamiento}</p>`;
            }

            // Si solo tenemos el ID, hacer la petición
            const tratamientoId = typeof tratamiento === 'string' ? tratamiento : tratamiento._id;
            const response = await fetch(`${BASE_URL}/tratamientos/findById/${tratamientoId}`);
            
            if (!response.ok) throw new Error('Error al cargar tratamiento');
            
            const data = await response.json();
            return `<p><strong>Tratamiento:</strong> ${data.nombre || data.nombreTratamiento}</p>`;
          } catch (error) {
            console.error('Error al cargar tratamiento:', error);
            return `<p><strong>Tratamiento:</strong> No disponible</p>`;
          }
        });

        // Esperar a que se resuelvan todas las promesas de tratamientos
        const tratamientosResults = await Promise.all(tratamientosPromises);
        tratamientosContainer.innerHTML = tratamientosResults.join('');
      } else {
        tratamientosContainer.innerHTML = '<p>No hay tratamientos asignados</p>';
      }

      // Agregar los elementos a la tarjeta
      const infoContainer = card.querySelector('.text-gray-600');
      infoContainer.appendChild(toggleTratamientosButton);
      infoContainer.appendChild(tratamientosContainer);

      // Crear y agregar el contenedor de acciones
      const actionsContainer = document.createElement('div');
      actionsContainer.className = 'flex flex-col space-y-2';
      actionsContainer.innerHTML = `
        ${botonRecordatorioHtml}
        ${botonAtenderHtml}
      `;
      card.appendChild(actionsContainer);

      // Crear y agregar el contenedor de estado
      const estadoContainer = document.createElement('div');
      estadoContainer.className = 'flex items-center justify-between pt-2';
      estadoContainer.innerHTML = `
        <span class="text-sm font-medium">Estado:</span>
        <span class="px-3 py-1 rounded-full text-sm font-medium ${getEstadoColor(consulta.estado)}">
          ${getEstadoTexto(consulta.estado)}
        </span>
      `;
      card.appendChild(estadoContainer);

      // Agregar la tarjeta al contenedor principal
      container.appendChild(card);
    }

    if (consultasHoy.length === 0) {
      container.innerHTML = `
        <div class="col-span-full text-center text-gray-500 dark:text-gray-400">
          No hay consultas programadas para hoy
        </div>
      `;
    }
  } catch (error) {
    console.error("Error al cargar las consultas:", error);
    container.innerHTML = `
      <div class="col-span-full text-center text-red-500">
        Error al cargar las consultas: ${error.message}
      </div>
    `;
  }
}

  loadData();
</script>

<style>
  .readme :global(h1:nth-of-type(2)) {
    display: none;
  }

  .svg-inline :global(svg) {
    height: 100%;
    width: 100%;
  }

	.card .flex {
  gap: 0.5rem; /* Espaciado entre el nombre y la hora */
}

.card h3 {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap; /* Trunca texto largo */
}

.card span {
  white-space: nowrap; /* Evita que la hora salte de línea */
}
</style>
