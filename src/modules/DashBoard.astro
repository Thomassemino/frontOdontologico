---
import 'flowbite';
import 'datatables.net';
---

<div class="px-4 pt-6">
	<div class="w-full bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
		<div class="flex flex-col md:flex-row justify-between items-center px-6 py-4">
			<div class="w-full md:w-auto md:pr-8 pb-4 md:pb-0">
				<img
					class="w-48 h-48 rounded-full shadow-lg mx-auto"
					src="/src/assets/flowbite-logo.svg"
					alt="Profile image"
				/>
			</div>

			<div class="w-full md:flex-1 md:ml-6">
				<h5 id="userName" class="mb-2 text-xl font-medium text-gray-900 dark:text-white text-center md:text-left">
					Cargando...
				</h5>
				<div class="w-full bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700 p-4 md:p-6">
					<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
						<div>
							<h5 class="text-sm font-medium text-gray-500 dark:text-gray-400">
								Email
							</h5>
							<p id="userEmail" class="text-lg font-medium text-gray-900 dark:text-white">
								Cargando...
							</p>
						</div>
						<div>
							<h5 class="text-sm font-medium text-gray-500 dark:text-gray-400">
								Teléfono
							</h5>
							<p id="userPhone" class="text-lg font-medium text-gray-900 dark:text-white">
								Cargando...
							</p>
						</div>
						<div id="especialidadContainer" class="hidden">
							<h5 class="text-sm font-medium text-gray-500 dark:text-gray-400">
								Especialidad
							</h5>
							<p id="userEspecialidad" class="text-lg font-medium text-gray-900 dark:text-white">
								Cargando...
							</p>
						</div>
						<div id="matriculaContainer" class="hidden">
							<h5 class="text-sm font-medium text-gray-500 dark:text-gray-400">
								Nº Matrícula
							</h5>
							<p id="userMatricula" class="text-lg font-medium text-gray-900 dark:text-white">
								Cargando...
							</p>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div id="tableContainer" class="mt-8">
			<div class="flex justify-center mb-4 space-x-4">
				<button
					id="citasButton"
					class="px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-800 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-blue-500"
				>
					Ver Citas
				</button>
				<button
					id="pacientesButton"
					class="px-4 py-2 text-sm font-medium text-gray-900 bg-white border border-gray-200 rounded-lg hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 dark:bg-gray-800 dark:border-gray-600 dark:text-white dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-blue-500"
				>
					Ver Pacientes
				</button>
			</div>
	
			<!-- Tabla de Citas -->
			<div id="citasTable" class="hidden w-full bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
				<div class="p-4">
					<h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Citas Programadas</h2>
					<div class="overflow-x-auto">
						<table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
							<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
								<tr>
									<th class="px-6 py-3">Fecha</th>
									<th class="px-6 py-3">Paciente</th>
									<th class="px-6 py-3">Motivo</th>
									<th class="px-6 py-3">Estado</th>
									<th class="px-6 py-3">Monto</th>
								</tr>
							</thead>
							<tbody id="citasTableBody">
								<!-- Las filas se llenarán dinámicamente -->
							</tbody>
						</table>
					</div>
				</div>
			</div>
	
			<!-- Tabla de Pacientes -->
			<div id="pacientesTable" class="hidden w-full bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
				<div class="p-4">
					<h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Lista de Pacientes</h2>
					<div class="overflow-x-auto">
						<table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
							<thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
								<tr>
									<th class="px-6 py-3">Nombre</th>
									<th class="px-6 py-3">DNI</th>
									<th class="px-6 py-3">Teléfono</th>
									<th class="px-6 py-3">Email</th>
								</tr>
							</thead>
							<tbody id="pacientesTableBody">
								<!-- Las filas se llenarán dinámicamente -->
							</tbody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
	</div>
</div>

<script is:inline>
  window.addEventListener('load', async () => {
    try {
      const userId = localStorage.getItem('userId');
      const userRole = localStorage.getItem('userRole');

      console.log('Initial load - userId:', userId);
      console.log('Initial load - userRole:', userRole);

      if (!userId || !userRole) {
        console.error('No user data found in localStorage');
        window.location.href = '/login';
        return;
      }

      let endpoint = '';
      if (userRole === 'odontologo') {
        endpoint = `http://localhost:5000/api/medico/findById/${userId}`;
      } else if (userRole === 'secretaria') {
        endpoint = `http://localhost:5000/api/secretaria/findByUser/${userId}`;
      } else {
        throw new Error('Rol de usuario no válido');
      }

      console.log('Fetching from endpoint:', endpoint);

      const response = await fetch(endpoint);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      // Extraer los datos del médico del objeto anidado
      const userData = data.medico;
      console.log('User data extracted:', userData);

      // Función para actualizar elemento si existe
      const updateElement = (id, value, defaultValue = 'No disponible') => {
        const element = document.getElementById(id);
        if (element) {
          element.textContent = value || defaultValue;
          console.log(`Updated ${id} with value:`, value || defaultValue);
        } else {
          console.warn(`Element with id ${id} not found`);
        }
      };

			updateElement('userName', userData.nombre);
updateElement('userEmail', userData.email);
updateElement('userPhone', userData.celular);

if (userRole === 'odontologo') {
  ['especialidadContainer', 'matriculaContainer', 'medicButtons'].forEach(id => {
    const element = document.getElementById(id);
    if (element) {
      element.classList.remove('hidden');
      console.log(`Showed container: ${id}`);
    }
  });

  updateElement('userEspecialidad', userData.especialidad);
  updateElement('userMatricula', userData.nMatricula);

  setupTables();

  if (userData._id) {
    localStorage.setItem('medicoId', userData._id);
  }
}
      console.log('Profile update completed successfully');

    } catch (error) {
      console.error('Error loading user data:', error);
      updateElement('userName', 'Error al cargar datos');
    }
  });

  // Script de diagnóstico
  setTimeout(() => {
    console.log('=== Diagnóstico de elementos DOM ===');
    ['userName', 'userEmail', 'userPhone', 'userEspecialidad', 'userMatricula'].forEach(id => {
      const element = document.getElementById(id);
      console.log(`${id}:`, element ? 'Existe' : 'No existe');
      if (element) {
        console.log(`${id} contenido:`, element.textContent);
      }
    });
  }, 2000);

	function setupTables() {
    const citasButton = document.getElementById('citasButton');
    const pacientesButton = document.getElementById('pacientesButton');
    const citasTable = document.getElementById('citasTable');
    const pacientesTable = document.getElementById('pacientesTable');

    citasButton.addEventListener('click', async () => {
      pacientesTable.classList.add('hidden');
      citasTable.classList.toggle('hidden');
      if (!citasTable.classList.contains('hidden')) {
        await cargarCitas();
      }
    });

    pacientesButton.addEventListener('click', async () => {
      citasTable.classList.add('hidden');
      pacientesTable.classList.toggle('hidden');
      if (!pacientesTable.classList.contains('hidden')) {
        await cargarPacientes();
      }
    });
  }

	async function cargarCitas() {
    try {
			const medicoId = localStorage.getItem('medicoId');
        console.log('Cargando citas para médico ID:', medicoId);

        const response = await fetch('http://localhost:5000/api/cita/todas');
        const data = await response.json();
        
        const citas = Array.isArray(data) ? data : data.citas || [];
        
        const citasTableBody = document.getElementById('citasTableBody');
        citasTableBody.innerHTML = '';

        // Filtrar por medicoId
        const citasFiltradas = citas.filter(cita => cita.medicoId === medicoId);
        
        console.log('Citas filtradas:', citasFiltradas);

        if (citasFiltradas.length === 0) {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td colspan="6" class="px-6 py-4 text-center">
                    No hay citas programadas
                </td>
            `;
            citasTableBody.appendChild(row);
            return;
        }

        citasFiltradas.forEach(cita => {
            const row = document.createElement('tr');
            row.className = 'bg-white border-b dark:bg-gray-800 dark:border-gray-700';
            
            const fecha = new Date(cita.fecha).toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });

            const estadoClasses = {
                'pendiente': 'bg-yellow-100 text-yellow-800',
                'completada': 'bg-green-100 text-green-800',
                'cancelada': 'bg-red-100 text-red-800'
            };

            // Crear la URL con los parámetros codificados
            const consultaUrl = `/consulta?id=${cita._id}&motivo=${encodeURIComponent(cita.motivo)}`;

            row.innerHTML = `
                <td class="px-6 py-4">${fecha}</td>
                <td class="px-6 py-4">${cita.pacienteId?.nombre || 'No disponible'}</td>
                <td class="px-6 py-4">${cita.motivo}</td>
                <td class="px-6 py-4">
                    <span class="px-2 py-1 rounded-full text-xs ${estadoClasses[cita.estado] || ''}">${cita.estado}</span>
                </td>
                <td class="px-6 py-4">$${cita.monto || 0}</td>
                <td class="px-6 py-4">
                    ${cita.estado === 'pendiente' ? `
                        <a href="${consultaUrl}"
                           class="px-3 py-2 text-sm font-medium text-center text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-4 focus:outline-none focus:ring-green-300">
                            Atender
                        </a>
                    ` : ''}
                </td>
            `;

            citasTableBody.appendChild(row);
        });
    } catch (error) {
        console.error('Error al cargar citas:', error);
        const citasTableBody = document.getElementById('citasTableBody');
        citasTableBody.innerHTML = `
            <tr>
                <td colspan="6" class="px-6 py-4 text-center text-red-500">
                    Error al cargar las citas
                </td>
            </tr>
        `;
    }
}

async function cargarPacientes() {
	try {
        const medicoId = localStorage.getItem('medicoId');
        console.log('Cargando pacientes para médico ID:', medicoId);

        // Primero obtenemos todas las citas del médico
        const citasResponse = await fetch('http://localhost:5000/api/citas/todas');
        const citasData = await citasResponse.json();
        const citas = Array.isArray(citasData) ? citasData : citasData.citas || [];

        // Filtramos las citas del médico
        const citasDelMedico = citas.filter(cita => cita.medicoId === medicoId);

        // Obtenemos los IDs únicos de pacientes
        const pacientesIds = [...new Set(citasDelMedico.map(cita => cita.pacienteId))];
        console.log('IDs de pacientes únicos:', pacientesIds);

        const pacientesTableBody = document.getElementById('pacientesTableBody');
        pacientesTableBody.innerHTML = '';

        if (pacientesIds.length === 0) {
            pacientesTableBody.innerHTML = `
                <tr>
                    <td colspan="4" class="px-6 py-4 text-center">
                        No hay pacientes atendidos
                    </td>
                </tr>
            `;
            return;
        }

        // Por cada paciente en las citas, buscamos sus datos
  for (const pacienteId of pacientesIds) {
            try {
                const pacienteResponse = await fetch(`http://localhost:5000/api/paciente/${pacienteId}`);
                const paciente = await pacienteResponse.json();
                
                const row = document.createElement('tr');
                row.className = 'bg-white border-b dark:bg-gray-800 dark:border-gray-700';
                
                row.innerHTML = `
                    <td class="px-6 py-4">${paciente.nombre || 'No disponible'}</td>
                    <td class="px-6 py-4">${paciente.dni || 'No disponible'}</td>
                    <td class="px-6 py-4">${paciente.areaCode || ''} ${paciente.telefono || 'No disponible'}</td>
                    <td class="px-6 py-4">${paciente.mail || 'No disponible'}</td>
                `;

                pacientesTableBody.appendChild(row);
            } catch (error) {
                console.error('Error al cargar datos del paciente:', error);
            }
        }
    } catch (error) {
        console.error('Error al cargar pacientes:', error);
        const pacientesTableBody = document.getElementById('pacientesTableBody');
        pacientesTableBody.innerHTML = `
            <tr>
                <td colspan="4" class="px-6 py-4 text-center text-red-500">
                    Error al cargar los pacientes
                </td>
            </tr>
        `;
    }
}
</script>

<style is:global>
	/* chart styles */
	.apexcharts-tooltip {
		@apply bg-white dark:bg-gray-700 text-gray-500 dark:text-gray-400 border-0 rounded-lg shadow-lg !important;
	}

	.apexcharts-tooltip .apexcharts-tooltip-title {
		@apply py-2 px-4 bg-gray-100 dark:bg-gray-600 border-b border-gray-200 dark:border-gray-500 !important;
	}

	.apexcharts-xaxistooltip {
		@apply text-gray-500 border-0 bg-white dark:bg-gray-700 dark:text-gray-300 rounded-lg shadow-lg !important;
	}

	.apexcharts-tooltip .apexcharts-tooltip-text-y-value {
		@apply dark:text-white;
	}

	.apexcharts-xaxistooltip-text {
		@apply font-medium text-sm !important;
	}

	.apexcharts-xaxistooltip:before,
	.apexcharts-xaxistooltip:after {
		@apply border-0 !important;
	}
</style>
