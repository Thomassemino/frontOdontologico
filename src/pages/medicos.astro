---
import LayoutCommon from "../app/LayoutCommon.astro";
---

<script>
const BASE_URL = 'http://localhost:5000/api';

const state = {
  modals: {
    edit: { isOpen: false, selectedMedico: null },
    create: { isOpen: false }
  }
};

// Validaciones
const validateMedico = (medico) => {
  const errors = [];
  const phoneRegex = /^\d{6,14}$/;
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  const matriculaRegex = /^[a-zA-Z0-9]+$/;
  const claveRegex = /^[a-zA-Z0-9]+$/;

  if (!medico.nombre.trim()) errors.push('El nombre es requerido');
  if (!emailRegex.test(medico.email)) errors.push('Email inválido');
  if (!phoneRegex.test(medico.celular)) errors.push('Celular inválido (6 a 14 dígitos)');
  if (!matriculaRegex.test(medico.nMatricula)) errors.push('Matrícula inválida');
  if (!medico.especialidad.trim()) errors.push('La especialidad es requerida');
  if (!claveRegex.test(medico.clave)) errors.push('Clave inválida (solo letras y números)');

  return errors;
};

const showNotification = (message, type = 'success') => {
  const existingNotification = document.querySelector('.notification');
  if (existingNotification) existingNotification.remove();

  const notification = document.createElement('div');
  const bgColor = type === 'success' ? 'bg-green-500' : 'bg-red-500';
  
  notification.className = `notification fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 text-white ${bgColor} transition-opacity duration-300`;
  notification.textContent = message;
  
  document.body.appendChild(notification);
  setTimeout(() => {
    notification.style.opacity = '0';
    setTimeout(() => notification.remove(), 3000);
  }, 3000);
};

async function actualizarTabla() {
  const tbody = document.querySelector('tbody');
  if (!tbody) return;

  try {
    const response = await fetch(`${BASE_URL}/medico`);
    const data = await response.json();
    const medicos = data.medicos || [];

    tbody.innerHTML = medicos.map(row => `
      <tr 
        class="hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors duration-150"
        data-nombre="${row.nombre || ''}"
        data-email="${row.email || ''}"
        data-celular="${row.celular || ''}"
        data-especialidad="${row.especialidad || ''}"
        data-matricula="${row.nMatricula || ''}"
      >
        <td class="px-6 py-4 text-sm text-gray-900 dark:text-gray-100">${row.nombre || ''}</td>
        <td class="px-6 py-4 text-sm text-gray-900 dark:text-gray-100">${row.email || ''}</td>
        <td class="px-6 py-4 text-sm text-gray-900 dark:text-gray-100">${row.especialidad || ''}</td>
        <td class="px-6 py-4 text-sm text-gray-900 dark:text-gray-100">${row.celular || ''}</td>
        <td class="px-6 py-4 text-sm text-gray-900 dark:text-gray-100">${row.nMatricula || ''}</td>
        <td class="px-6 py-4 text-sm text-gray-900 dark:text-gray-100">
          <div class="flex space-x-2">
            <button 
              class="edit-button p-2 text-blue-600 hover:text-blue-700 focus:outline-none"
              title="Editar"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
              </svg>
            </button>
            <button 
              class="delete-button p-2 text-red-600 hover:text-red-700 focus:outline-none"
              title="Eliminar"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M3 6h18"></path>
                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"></path>
                <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
              </svg>
            </button>
          </div>
        </td>
      </tr>
    `).join('');
  } catch (error) {
    console.error('Error al obtener médicos:', error);
    showNotification('No se pudieron cargar los médicos', 'error');
  }
}

const handleFormSubmit = async (formData) => {
  const medico = {
    nombre: formData.get('nombre')?.toString().trim(),
    email: formData.get('email')?.toString().trim(),
    especialidad: formData.get('especialidad')?.toString().trim(),
    celular: formData.get('celular')?.toString().trim(),
    nMatricula: formData.get('nMatricula')?.toString().trim(),
    clave: formData.get('clave')?.toString().replace(/[^a-zA-Z0-9]/g, '') // Elimina caracteres no permitidos
  };

  const errors = validateMedico(medico);
  if (errors.length > 0) {
    throw new Error(errors.join('\n'));
  }

  const response = await fetch(`${BASE_URL}/medico/create`, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'Origin': 'http://localhost:4321'
    },
    body: JSON.stringify(medico)
  });

  if (!response.ok) {
    throw new Error(`Error del servidor: ${response.status}`);
  }

  return await response.json();
};

const handleDelete = async (email, nombre) => {
  try {
    const response = await fetch(`${BASE_URL}/medico/deleteByUser/${email}`, {
      method: 'DELETE',
      headers: { 
        'Content-Type': 'application/json',
        'Origin': 'http://localhost:4321'
      }
    });

    if (!response.ok) {
      throw new Error(`Error del servidor: ${response.status}`);
    }

    const result = await response.json();
    if (result) {
      showNotification('Médico eliminado correctamente');
      await actualizarTabla();
    } else {
      throw new Error('Error al eliminar el médico');
    }
  } catch (error) {
    showNotification(error.message, 'error');
  }
};

// En handleEdit
const handleEdit = async (medico) => {
  try {
    const response = await fetch(`${BASE_URL}/medico/findByEmail/${state.modals.edit.selectedMedico.email}`);
    const data = await response.json();
    
    if (!data.medico) {
      throw new Error('No se encontró el médico');
    }

    const updateResponse = await fetch(`${BASE_URL}/medico/updateById/${data.medico._id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Origin': 'http://localhost:4321'
      },
      body: JSON.stringify(medico)
    });

    if (!updateResponse.ok) {
      throw new Error(`Error del servidor: ${updateResponse.status}`);
    }

    showNotification('Médico actualizado correctamente');
    await actualizarTabla();
    closeEditModal();
  } catch (error) {
    showNotification(error.message, 'error');
  }
};

// Modal handlers
const openEditModal = (medico) => {
  state.modals.edit.selectedMedico = { ...medico };
  state.modals.edit.isOpen = true;
  document.getElementById('editModal')?.classList.remove('hidden');
  
  const form = document.getElementById('editForm');
  if (form) {
    Object.entries(medico).forEach(([key, value]) => {
      const input = form.elements[key];
      if (input) input.value = value;
    });
  }
};

const closeEditModal = () => {
  state.modals.edit.isOpen = false;
  state.modals.edit.selectedMedico = null;
  document.getElementById('editModal')?.classList.add('hidden');
};

const openCreateModal = () => {
  document.getElementById('createModal')?.classList.remove('hidden');
};

const closeCreateModal = () => {
  document.getElementById('createModal')?.classList.add('hidden');
  document.getElementById('createForm')?.reset();
};

// Event Listeners
document.addEventListener('DOMContentLoaded', () => {
  actualizarTabla();

  document.getElementById('createMedicoButton')?.addEventListener('click', openCreateModal);

  document.addEventListener('click', (e) => {
    if (e.target.classList.contains('close-modal')) {
      closeEditModal();
      closeCreateModal();
    }
  });

  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeEditModal();
      closeCreateModal();
    }
  });

  document.querySelector('tbody')?.addEventListener('click', async (e) => {
    const target = e.target;
    const row = target.closest('tr');
    if (!row) return;

    const button = target.closest('.edit-button, .delete-button');
    if (!button) return;

    if (button.classList.contains('edit-button')) {
      const medico = {
        nombre: row.dataset.nombre,
        email: row.dataset.email,
        especialidad: row.dataset.especialidad,
        celular: row.dataset.celular,
        nMatricula: row.dataset.matricula
      };
      openEditModal(medico);
    }

    if (button.classList.contains('delete-button')) {
      if (confirm(`¿Está seguro que desea eliminar al médico ${row.dataset.nombre}?`)) {
        await handleDelete(row.dataset.email, row.dataset.nombre);
      }
    }
  });

  document.getElementById('createForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    try {
      await handleFormSubmit(new FormData(e.target));
      showNotification('Médico creado correctamente');
      closeCreateModal();
      await actualizarTabla();
    } catch (error) {
      showNotification(error.message, 'error');
    }
  });

	document.getElementById('volverBtn')?.addEventListener('click', () => {
  window.location.href = '/';
});

  document.getElementById('editForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const form = e.target;
    const medico = {
      nombre: form.elements.nombre.value,
      email: form.elements.email.value,
      especialidad: form.elements.especialidad.value,
      celular: form.elements.celular.value,
      nMatricula: form.elements.nMatricula.value
    };
    await handleEdit(medico);
  });
});
</script>

<LayoutCommon>
  <div class="min-h-screen bg-gradient-to-r from-slate-100 to-slate-200 p-4 text-slate-800 dark:from-slate-900 dark:to-slate-800 dark:text-slate-100 lg:p-16">
    <div class="mx-auto max-w-6xl">
      <div class="flex justify-between items-center mb-6">
        <div class="flex items-center gap-4">
          <button id="volverBtn" class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">
            ← Volver al inicio
          </button>
          <h2 class="text-2xl font-bold">Médicos</h2>
        </div>
        <button
          id="createMedicoButton"
          class="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-2 focus:ring-green-300 dark:focus:ring-green-900 transition-colors duration-200"
        >
          Crear Nuevo Médico
        </button>
      </div>

      <div class="overflow-x-auto rounded-lg bg-white shadow-xl dark:bg-gray-800">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead class="bg-gray-100 dark:bg-gray-700">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">Nombre</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">Email</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">Especialidad</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">Celular</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">Matrícula</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider dark:text-gray-300">Acciones</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
          </tbody>
        </table>
      </div>
    </div>
  </div>

  <!-- Modal de Edición -->
  <div id="editModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="absolute inset-0 bg-black opacity-50"></div>
		<div class="relative bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 w-1/3">
      <h2 class="text-lg font-bold text-gray-800 dark:text-gray-100 mb-4">Editar Médico</h2>
      <form id="editForm" class="space-y-4">
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre</label>
          <input 
            type="text" 
            name="nombre"
            required
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
          <input 
            type="email" 
            name="email"
            required
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>

        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Especialidad</label>
          <input 
            type="text" 
            name="especialidad"
            required
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Celular</label>
          <input 
            type="text" 
            name="celular"
            required
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>

        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Matrícula</label>
          <input 
            type="text" 
            name="nMatricula"
            required
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>

				<div class="mb-4">
					<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Clave</label>
<input 
  type="password" 
  name="clave"
  required
  pattern="^[a-zA-Z0-9]+$"
  placeholder="Solo letras y números, sin espacios ni símbolos"
  class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
/>
				</div>

        <div class="flex justify-end space-x-4">
          <button 
            type="button" 
            class="close-modal px-4 py-2 text-sm font-medium text-white bg-gray-600 rounded-lg hover:bg-gray-700 focus:ring-2 focus:ring-gray-300"
          >
            Cancelar
          </button>
          <button 
            type="submit" 
            class="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-2 focus:ring-green-300"
          >
            Guardar
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Modal de Creación -->
  <div id="createModal" class="fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="absolute inset-0 bg-black opacity-50"></div>
    <div class="relative bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 w-1/3">
      <h2 class="text-lg font-bold text-gray-800 dark:text-gray-100 mb-4">Crear Nuevo Médico</h2>
      <form id="createForm" class="space-y-4">
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Nombre</label>
          <input 
            type="text" 
            name="nombre"
            required
            placeholder="Ingrese nombre completo"
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
          <input 
            type="email" 
            name="email"
            required
            placeholder="ejemplo@correo.com"
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>

        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Especialidad</label>
          <input 
            type="text" 
            name="especialidad"
            required
            placeholder="Ingrese especialidad"
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>
        
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Celular</label>
          <input 
            type="text" 
            name="celular"
            required
            placeholder="Número de celular"
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>

        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Matrícula</label>
          <input 
            type="text" 
            name="nMatricula"
            required
            placeholder="Ingrese número de matrícula"
            class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
          />
        </div>

				<div class="mb-4">
					<label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Clave</label>
					<input 
					type="password" 
					name="clave"
					required
					pattern="^[a-zA-Z0-9]+$"
					placeholder="Solo letras y números, sin espacios ni símbolos"
					class="mt-1 block w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-gray-100" 
				/>
				</div>

        <div class="flex justify-end space-x-4">
          <button 
            type="button" 
            class="close-modal px-4 py-2 text-sm font-medium text-white bg-gray-600 rounded-lg hover:bg-gray-700 focus:ring-2 focus:ring-gray-300"
          >
            Cancelar
          </button>
          <button 
            type="submit" 
            class="px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-lg hover:bg-green-700 focus:ring-2 focus:ring-green-300"
          >
            Crear
          </button>
        </div>
      </form>
    </div>
  </div>
</LayoutCommon>
