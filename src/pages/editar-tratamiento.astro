---
// src/pages/editar-tratamiento.astro
import LayoutCommon from "../app/LayoutCommon.astro";
import tratamientos from '../data/tratamientos.json';

// Obtener el ID del tratamiento de los parámetros de la URL
const params = new URL(Astro.request.url).searchParams;
const id = params.get('id');

// Encontrar el tratamiento
const tratamiento = tratamientos.find(t => t.id === parseInt(id));

// Redireccionar si no se encuentra el tratamiento
if (!tratamiento) {
  return Astro.redirect('/tratamiento');
}
---

<LayoutCommon>
  <div class="min-h-screen bg-gradient-to-r from-slate-100 to-slate-200 p-4 text-slate-800 dark:from-slate-900 dark:to-slate-800 dark:text-slate-100 lg:p-16">
    <div class="mx-auto max-w-4xl">
      <div class="mb-8">
        <button id="volverBtn" class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">
          ← Volver a tratamientos
        </button>
      </div>

      <div class="rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800">
        <h1 class="mb-6 text-2xl font-bold">Editar Tratamiento</h1>
        
        <form id="editarTratamientoForm" class="space-y-6">
          <input type="hidden" name="id" value={tratamiento.id} />
          
          <div class="space-y-4">
            <div>
              <label for="nombreTratamiento" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Nombre del Tratamiento
              </label>
              <input
                type="text"
                id="nombreTratamiento"
                name="nombreTratamiento"
                required
                value={tratamiento.nombreTratamiento}
                class="mt-1 w-full rounded-md border border-gray-300 p-2 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                placeholder="Ingrese el nombre del tratamiento"
              />
            </div>

            <div>
              <label for="descripcion" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Descripción
              </label>
              <textarea
                id="descripcion"
                name="descripcion"
                rows="4"
                required
                class="mt-1 w-full rounded-md border border-gray-300 p-2 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600 dark:bg-gray-700 dark:text-white"
                placeholder="Ingrese la descripción del tratamiento"
              >{tratamiento.descripcion}</textarea>
            </div>
          </div>

          <div class="flex justify-end space-x-4">
            <button
              type="button"
              id="cancelarBtn"
              class="rounded-lg bg-gray-200 px-4 py-2 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700 focus:ring-2 focus:ring-blue-300"
            >
              Guardar Cambios
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</LayoutCommon>

<script>
  const form = document.getElementById('editarTratamientoForm');
  const volverBtn = document.getElementById('volverBtn');
  const cancelarBtn = document.getElementById('cancelarBtn');

  form?.addEventListener('submit', async (e) => {
    e.preventDefault();

    try {
      const submitButton = form.querySelector('button[type="submit"]');
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = 'Guardando...';
      }

      const formData = new FormData(form as HTMLFormElement);
      
      const tratamientoData = {
        id: parseInt(formData.get('id')?.toString() || '0'),
        nombreTratamiento: formData.get('nombreTratamiento')?.toString().trim(),
        descripcion: formData.get('descripcion')?.toString().trim()
      };

      // Validaciones
      if (!tratamientoData.nombreTratamiento || !tratamientoData.descripcion) {
        throw new Error('Todos los campos son requeridos');
      }

      if (tratamientoData.nombreTratamiento.length < 3) {
        throw new Error('El nombre debe tener al menos 3 caracteres');
      }

      if (tratamientoData.descripcion.length < 10) {
        throw new Error('La descripción debe tener al menos 10 caracteres');
      }

      const response = await fetch('/api/editar-tratamiento', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(tratamientoData)
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || 'Error al actualizar el tratamiento');
      }

			window.location.href = '/tratamiento';
      alert('Tratamiento actualizado exitosamente');
    } catch (error) {
      console.error('Error:', error);
      alert(error instanceof Error ? error.message : 'Error al actualizar el tratamiento');
    } finally {
      const submitButton = form.querySelector('button[type="submit"]');
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = 'Guardar Cambios';
      }
    }
  });

  const volver = () => window.location.href = '/tratamiento';
  
  volverBtn?.addEventListener('click', volver);
  
  cancelarBtn?.addEventListener('click', () => {
    if (confirm('¿Está seguro que desea cancelar? Se perderán los cambios.')) {
      volver();
    }
  });

  // Validación en tiempo real
  const nombreInput = document.getElementById('nombreTratamiento');
  const descripcionInput = document.getElementById('descripcion');

  nombreInput?.addEventListener('input', (e) => {
    const input = e.target as HTMLInputElement;
    if (input.value.length < 3) {
      input.setCustomValidity('El nombre debe tener al menos 3 caracteres');
    } else {
      input.setCustomValidity('');
    }
  });

  descripcionInput?.addEventListener('input', (e) => {
    const input = e.target as HTMLTextAreaElement;
    if (input.value.length < 10) {
      input.setCustomValidity('La descripción debe tener al menos 10 caracteres');
    } else {
      input.setCustomValidity('');
    }
  });
</script>
