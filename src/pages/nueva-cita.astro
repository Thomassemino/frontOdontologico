---
import LayoutCommon from "../app/LayoutCommon.astro";
---

<LayoutCommon>
  <div class="min-h-screen bg-gradient-to-r from-slate-100 to-slate-200 p-4 text-slate-800 dark:from-slate-900 dark:to-slate-800 dark:text-slate-100 lg:p-16">
    <div class="mx-auto max-w-4xl">
      <div class="mb-8">
        <button id="volverBtn" class="text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">
          ← Volver a citas
        </button>
      </div>

      <div class="rounded-lg bg-white p-6 shadow-xl dark:bg-gray-800">
        <h1 class="mb-6 text-2xl font-bold">Nueva Cita</h1>
        
        <form id="nuevaConsultaForm" class="space-y-6">
          <div class="space-y-4">
            <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
              <div>
                <label for="nombrePaciente" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Nombre del Paciente
                </label>
                <select
                  id="nombrePaciente"
                  name="nombrePaciente"
                  required
                  class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700 focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="">Seleccione un paciente</option>
                </select>
              </div>
      
              <div>
                <label for="nombreMedico" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Médico
                </label>
                <select
                  id="nombreMedico"
                  name="nombreMedico"
                  required
                  class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700 focus:border-blue-500 focus:ring-blue-500"
                >
                  <option value="">Seleccione un médico</option>
                </select>
              </div>
      
              <div>
                <label for="diaConsulta" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Día de Cita
                </label>
                <input
                  type="date"
                  id="diaConsulta"
                  name="diaConsulta"
                  required
                  class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700"
                />
              </div>
      
              <div>
                <label for="horaConsulta" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Hora de Consulta
                </label>
                <input
                  type="time"
                  id="horaConsulta"
                  name="horaConsulta"
                  required
                  class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700"
                />
              </div>
            </div>
      
            <div>
              <label for="problema" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Problema
              </label>
              <textarea
                id="problema"
                name="problema"
                rows="3"
                required
                class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700"
              ></textarea>
            </div>
      
            <div>
              <label for="tratamiento" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Tratamiento
              </label>
              <textarea
                id="tratamiento"
                name="tratamiento"
                rows="3"
                required
                class="mt-1 w-full rounded-md border border-gray-300 bg-white p-2 dark:border-gray-600 dark:bg-gray-700"
              ></textarea>
            </div>
          </div>
      
          <div class="flex justify-end space-x-4">
            <button
              type="button"
              id="cancelarBtn"
              class="rounded-lg bg-gray-200 px-4 py-2 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300"
            >
              Cancelar
            </button>
            <button
              type="submit"
              class="rounded-lg bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
            >
              Crear Consulta
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</LayoutCommon>

<script>
  const form = document.getElementById('nuevaConsultaForm');
  const volverBtn = document.getElementById('volverBtn');
  const cancelarBtn = document.getElementById('cancelarBtn');

  async function obtenerSiguienteId() {
    try {
      const response = await fetch('/api/citas');
      if (!response.ok) throw new Error('Error al obtener citas');
      const citas = await response.json();
      
      if (citas.length === 0) return 1;
      
      const maxId = Math.max(...citas.map((cita: any) => parseInt(cita.id)));
      return maxId + 1;
    } catch (error) {
      console.error('Error:', error);
      return 1;
    }
  }

 // Modificación del event listener del form:
form?.addEventListener('submit', async (e) => {
  e.preventDefault();

  try {
    const nextId = await obtenerSiguienteId();
    const formData = new FormData(form as HTMLFormElement);
    
    // Debug: Verificar que se obtienen los datos del paciente
    const pacienteDataString = formData.get('nombrePaciente');
    console.log('Datos del paciente (string):', pacienteDataString);
    
    if (!pacienteDataString) {
      throw new Error('No se seleccionó ningún paciente');
    }

    const pacienteData = JSON.parse(pacienteDataString as string);
    console.log('Datos del paciente (parsed):', pacienteData);

    const consultaData = {
      id: nextId,
      diaConsulta: formData.get('diaConsulta'),
      horaConsulta: formData.get('horaConsulta'),
      nombrePaciente: pacienteData.nombre,
      celularPaciente: pacienteData.celular,
      nombreMedico: formData.get('nombreMedico'),
      problema: formData.get('problema'),
      tratamiento: formData.get('tratamiento'),
      estado: 'activa'
    };

    console.log('Datos a enviar:', consultaData);

    const response = await fetch('/api/crear-cita', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(consultaData)
    });

    console.log('Status de la respuesta:', response.status);
    const responseData = await response.json();
    console.log('Respuesta del servidor:', responseData);

    if (!response.ok) {
      throw new Error(`Error al crear la consulta: ${responseData.message || 'Error desconocido'}`);
    }

    alert('Consulta creada exitosamente');
    window.location.href = '/citasTable';
  } catch (error) {
    console.error('Error detallado:', error);
    alert(`Error al crear la consulta: ${error.message}`);
  }
});

  volverBtn?.addEventListener('click', () => {
    window.location.href = '/citasTable';
  });

  cancelarBtn?.addEventListener('click', () => {
    if (confirm('¿Está seguro que desea cancelar? Se perderán los datos ingresados.')) {
      window.location.href = '/citasTable';
    }
  });

  async function cargarPacientes() {
  try {
    const response = await fetch('/api/pacientes');
    if (!response.ok) throw new Error('Error al cargar pacientes');
    
    const pacientes = await response.json();
    console.log('Pacientes cargados:', pacientes);
    
    const selectPaciente = document.getElementById('nombrePaciente');
    
    if (!selectPaciente) {
      throw new Error('No se encontró el elemento select para pacientes');
    }

    // Limpiar opciones existentes excepto la primera
    while (selectPaciente.options.length > 1) {
      selectPaciente.remove(1);
    }
    
    pacientes.forEach(paciente => {
      const option = document.createElement('option');
      const pacienteData = {
        dni: paciente.dni,
        nombre: paciente.name,
        celular: paciente.telefono // Corregido de celular a telefono
      };
      
      option.value = JSON.stringify(pacienteData);
      option.textContent = `${paciente.name} - DNI: ${paciente.dni}`;
      selectPaciente.appendChild(option);
    });
    
    console.log('Opciones de pacientes cargadas:', selectPaciente.options.length);
  } catch (error) {
    console.error('Error al cargar pacientes:', error);
    alert('Error al cargar la lista de pacientes: ' + error.message);
  }
}

  async function cargarMedicos() {
    try {
      const response = await fetch('/api/medicos');
      if (!response.ok) throw new Error('Error al cargar médicos');
      
      const medicos = await response.json();
      const selectMedico = document.getElementById('nombreMedico') as HTMLSelectElement;
      
      if (selectMedico) {
        medicos.forEach((medico: any) => {
          const option = document.createElement('option');
          option.value = medico.nombre;
          option.textContent = `${medico.nombre} - ${medico.especialidad}`;
          selectMedico.appendChild(option);
        });
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Error al cargar la lista de médicos');
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    cargarMedicos();
    cargarPacientes();
  });
</script>
